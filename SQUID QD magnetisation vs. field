{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3aed961a",
   "metadata": {},
   "source": [
    "****\n",
    "This program extracts \".dat\" data (or similar) from **Quantum Design SQUID outputs**, for the extraction of magnetisation vs. applied field hysteresis curves. It also performs a correction of the diamagnetic component (necessary for thin film systems).\n",
    "\n",
    "It has been conceived for sets of measurements whose file names follow the same document syntax. \n",
    "\n",
    "**example**: f'AP098-MvsH-{T}K.dat''\n",
    "where T be the temperature.\n",
    "\n",
    "****\n",
    "\n",
    "An alternative version with just \"file\" input is also proposed, but it does not allow automatisation.\n",
    "\n",
    "****\n",
    "\n",
    "The code must be present in the same directory as the .dat files, otherwise the next lines of code should be added after importing the module **os**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "654bd133",
   "metadata": {},
   "outputs": [],
   "source": [
    "# directory = ____ # fill with directory\n",
    "# os.chdir(directory)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81932e1a",
   "metadata": {},
   "source": [
    "****\n",
    "Images can be directly copied from the outputs, but if you want to save them, you can use the following lines:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bc456696",
   "metadata": {},
   "outputs": [],
   "source": [
    "# filename = _____ # fill with file names\n",
    "# plt.savefig(filename.png', dpi = 500, bbox_inches = 'tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b548e68e",
   "metadata": {},
   "source": [
    "****\n",
    "The relevant modules should be imported, and some parameters need to be defined:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d0193f7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np  # arithmetic operations\n",
    "import pandas as pd  # for general data operations\n",
    "import matplotlib.pyplot as plt  # representation main library\n",
    "import seaborn as sns  # representation extra library\n",
    "import os  # operating system\n",
    "import math  # math module\n",
    "from scipy.optimize import curve_fit  # for the fit of curves\n",
    "\n",
    "# to plot directly on the Jupyter notebook, highly recommended:\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c8fcbdcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "textlines = 40 # numbers of lines that come before the real data. Header should not be considered\n",
    "\n",
    "# lines that we are interested in:\n",
    "c_H = 'Magnetic Field (Oe)'\n",
    "c_M = 'DC Moment Fixed Ctr (emu)'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "907f80ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_grab_r(T): \n",
    "    '''\n",
    "    Reads a given file, using a common file syntax. Returns dataframe with the desired columns.\n",
    "    Also plots data.\n",
    "    '''\n",
    "    \n",
    "    # All the file names should follow the same syntax, otherwise a file input should be given\n",
    "    file = f'AP098-MvsH-{T}K.dat'\n",
    "    \n",
    "    # QD's software adds 00001 or 00002 if the file is already present. The following lines check whether \n",
    "    # a \"newer\" version of the file exists and if it is not empty\n",
    "    if not os.path.isfile(file) or os.path.getsize(file) < 1e4:\n",
    "        file = file[:-4] + '_00001.dat'\n",
    "\n",
    "    df = pd.read_csv(file, skiprows=textlines) # loads the desired data\n",
    "    sns.scatterplot(x=c_H, y=c_M, data=df)\n",
    "    return df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "50c1210c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_grab_file_r(file):\n",
    "    '''\n",
    "    Reads a given file, using a file name input. Returns dataframe with the desired columns.\n",
    "    Also plots data.\n",
    "    '''\n",
    "    df = pd.read_csv(file, skiprows=textlines) # loads the desired data\n",
    "    sns.scatterplot(x=c_H, y=c_M, data=df)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "87d3512c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = data_grab_r(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5cd11f56",
   "metadata": {},
   "outputs": [],
   "source": [
    "def linfit(x,a,b):\n",
    "    '''\n",
    "    Function for the fit of the linear part (diamagnetic component)\n",
    "    '''\n",
    "    return a*x + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "87baa87c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def data_treat_r(T):\n",
    "    '''\n",
    "    Same functionality as \"data_grab_r but with diamagnetism correction\n",
    "    \"'''\n",
    "\n",
    "    # All the file names should follow the same syntax, otherwise a file input should be given\n",
    "    file = f'AP098-MvsH-{T}K.dat'\n",
    "    \n",
    "    # QD's software adds 00001 or 00002 if the file is already present. The following lines check whether \n",
    "    # a \"newer\" version of the file exists and if it is not empty\n",
    "    if not os.path.isfile(file) or os.path.getsize(file) < 1e4:\n",
    "        file = file[:-4] + '_00001.dat'\n",
    "\n",
    "    df = pd.read_csv(file, skiprows=textlines) # loads the desired data\n",
    "    \n",
    "    H_sat = 4e4 # a saturation field above which dimanagnetism prevails\n",
    "    \n",
    "    par, cov = curve_fit(f=linfit, # fit\n",
    "                         xdata=df[(df[c_H] <- H_sat)][c_H], \n",
    "                         ydata=df[(df[c_H] <- H_sat)][c_M],\n",
    "                         bounds=(-np.inf, np.inf),  maxfev = 10000)\n",
    "    \n",
    "    linear_fit = linfit(df[c_H], par[0], par[1])\n",
    "    \n",
    "    df['M_corr'] = df[c_M] - linear_fit[:]\n",
    "    \n",
    "    df['M_corr'] = df['M_corr'] - df['M_corr'].mean() # data should be centered:\n",
    "    \n",
    "    \n",
    "    sns.scatterplot(x=c_H, y='M_corr', data=df, label=str(T))\n",
    "    return df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3b09f03c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = data_treat_r(60)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "600e539c",
   "metadata": {},
   "source": [
    "Let's make a plot at different temperature values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0be962f8",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "T_list = (30, 140, 220) # list of temperatures to consider\n",
    "\n",
    "plt.figure(figsize=(8,8))\n",
    "\n",
    "plt.xlabel('H (Oe)', fontsize=15)\n",
    "plt.ylabel(r'emu', fontsize=15)\n",
    "sns.set_style(\"ticks\")\n",
    "plt.xticks(fontsize=15)\n",
    "plt.yticks(fontsize=15)\n",
    "\n",
    "for T in T_list:\n",
    "    data_treat_r(T)\n",
    "    \n",
    "    \n",
    "legend = plt.legend(title='Temperature (K)', fontsize=14)\n",
    "legend.get_title().set_fontsize('14')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "796a4140",
   "metadata": {},
   "source": [
    "A more specific correction should be done for each measurement (taking into account the cycle opening) but for most samples this would be enough.\n",
    "\n",
    "****\n",
    "\n",
    "If an output in a friendlier format is desired, the following function (with no representation) could be used:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6a6802e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_fit(T):\n",
    "    '''\n",
    "    Same functionality as \"data_fit_r but no representation. It saves the data in csv format.\n",
    "    \"'''\n",
    "\n",
    "    # All the file names should follow the same syntax, otherwise a file input should be given\n",
    "    file = f'AP098-MvsH-{T}K.dat'\n",
    "    \n",
    "    # QD's software adds 00001 or 00002 if the file is already present. The following lines check whether \n",
    "    # a \"newer\" version of the file exists and if it is not empty\n",
    "    if not os.path.isfile(file) or os.path.getsize(file) < 1e4:\n",
    "        file = file[:-4] + '_00001.dat'\n",
    "\n",
    "    df = pd.read_csv(file, skiprows=textlines) # loads the desired data\n",
    "    \n",
    "    H_sat = 4e4 # a saturation field above which dimanagnetism prevails\n",
    "    \n",
    "    par, cov = curve_fit(f=linfit, # fit\n",
    "                         xdata=df[(df[c_H] <- H_sat)][c_H], \n",
    "                         ydata=df[(df[c_H] <- H_sat)][c_M],\n",
    "                         bounds=(-np.inf, np.inf),  maxfev = 10000)\n",
    "    \n",
    "    linear_fit = linfit(df[c_H], par[0], par[1])\n",
    "    \n",
    "    df['M_corr'] = df[c_M] - linear_fit[:]\n",
    "    \n",
    "    df['M_corr'] = df['M_corr'] - df['M_corr'].mean() # data should be centered:\n",
    "    \n",
    "    df.to_csv(file[:-4] + '.csv')\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "eb1565be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Comment</th>\n",
       "      <th>Time Stamp (sec)</th>\n",
       "      <th>Temperature (K)</th>\n",
       "      <th>Magnetic Field (Oe)</th>\n",
       "      <th>Moment (emu)</th>\n",
       "      <th>M. Std. Err. (emu)</th>\n",
       "      <th>Transport Action</th>\n",
       "      <th>Averaging Time (sec)</th>\n",
       "      <th>Frequency (Hz)</th>\n",
       "      <th>Peak Amplitude (mm)</th>\n",
       "      <th>...</th>\n",
       "      <th>Map 08</th>\n",
       "      <th>Map 09</th>\n",
       "      <th>Map 10</th>\n",
       "      <th>Map 11</th>\n",
       "      <th>Map 12</th>\n",
       "      <th>Map 13</th>\n",
       "      <th>Map 14</th>\n",
       "      <th>Map 15</th>\n",
       "      <th>Map 16</th>\n",
       "      <th>M_corr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.877690e+09</td>\n",
       "      <td>60.000191</td>\n",
       "      <td>69999.679688</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.877690e+09</td>\n",
       "      <td>60.000277</td>\n",
       "      <td>64999.898438</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.877690e+09</td>\n",
       "      <td>60.000118</td>\n",
       "      <td>59999.968750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.877690e+09</td>\n",
       "      <td>59.999798</td>\n",
       "      <td>54999.933594</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.877690e+09</td>\n",
       "      <td>59.999912</td>\n",
       "      <td>49999.875000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000034</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 89 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Comment  Time Stamp (sec)  Temperature (K)  Magnetic Field (Oe)  \\\n",
       "0      NaN      3.877690e+09        60.000191         69999.679688   \n",
       "1      NaN      3.877690e+09        60.000277         64999.898438   \n",
       "2      NaN      3.877690e+09        60.000118         59999.968750   \n",
       "3      NaN      3.877690e+09        59.999798         54999.933594   \n",
       "4      NaN      3.877690e+09        59.999912         49999.875000   \n",
       "\n",
       "   Moment (emu)  M. Std. Err. (emu)  Transport Action  Averaging Time (sec)  \\\n",
       "0           NaN                 NaN                 6                   NaN   \n",
       "1           NaN                 NaN                 6                   NaN   \n",
       "2           NaN                 NaN                 6                   NaN   \n",
       "3           NaN                 NaN                 6                   NaN   \n",
       "4           NaN                 NaN                 6                   NaN   \n",
       "\n",
       "   Frequency (Hz)  Peak Amplitude (mm)  ...  Map 08  Map 09  Map 10  Map 11  \\\n",
       "0             NaN                  NaN  ...     NaN     NaN     NaN     NaN   \n",
       "1             NaN                  NaN  ...     NaN     NaN     NaN     NaN   \n",
       "2             NaN                  NaN  ...     NaN     NaN     NaN     NaN   \n",
       "3             NaN                  NaN  ...     NaN     NaN     NaN     NaN   \n",
       "4             NaN                  NaN  ...     NaN     NaN     NaN     NaN   \n",
       "\n",
       "   Map 12  Map 13  Map 14  Map 15  Map 16    M_corr  \n",
       "0     NaN     NaN     NaN     NaN     NaN  0.000035  \n",
       "1     NaN     NaN     NaN     NaN     NaN  0.000035  \n",
       "2     NaN     NaN     NaN     NaN     NaN  0.000035  \n",
       "3     NaN     NaN     NaN     NaN     NaN  0.000034  \n",
       "4     NaN     NaN     NaN     NaN     NaN  0.000034  \n",
       "\n",
       "[5 rows x 89 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = data_fit(60)\n",
    "df.head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
